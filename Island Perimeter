class Solution {
    public int islandPerimeter(int[][] grid) {
        //leetcode 463, time: O(m X n), space: O(1)
        if(grid == null || grid.length == 0) return 0;
        
        int m = grid.length;
        int n = grid[0].length;
        int pm = 0;
        
        for(int row = 0; row < m; row++){
            for(int col = 0; col < n; col++){
                if(grid[row][col] == 1){
                    pm += isWater(grid, row-1, col) ? 1 : 0;
                    pm += isWater(grid, row+1, col) ? 1 : 0;
                    pm += isWater(grid, row, col-1) ? 1 : 0;
                    pm += isWater(grid, row, col+1) ? 1 : 0;
                }
            }
        }
        
        return pm;
    }
    
    boolean isWater(int[][] grid, int row, int col){
        if(row < 0 || row >= grid.length || col < 0 || col >= grid[0].length){
            return true;
        }
        
        return grid[row][col] == 0;
    }
}
