/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        List<Interval> ans = new ArrayList<Interval>();
        
        if(intervals == null || intervals.size() == 0 || intervals.size() == 1){
            return intervals;
        }
        
        Collections.sort(intervals, (a, b) -> (a.start - b.start));
        int start = intervals.get(0).start;
        int end = intervals.get(0).end;
        
        //swap line
        for(Interval interval : intervals){
            if(interval.start <= end){
                end = Math.max(end, interval.end);
            }
            else{
                ans.add(new Interval(start, end));
                start = interval.start;
                end = interval.end;
            }
        }
            
        ans.add(new Interval(start, end));
        return ans;
    }
    
}
