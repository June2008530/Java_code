class Solution {
    public List<String> letterCombinations(String digits) {
        HashMap<Character, char[]> hmap = new HashMap<Character, char[]>();
        hmap.put('0', new char[]{});
        hmap.put('1', new char[]{});
        hmap.put('2', new char[]{'a','b','c'});
        hmap.put('3', new char[]{'d','e','f'});
        hmap.put('4', new char[]{'g','h','i'});
        hmap.put('5', new char[]{'j','k','l'});
        hmap.put('6', new char[]{'m','n','o'});
        hmap.put('7', new char[]{'p','q','r','s'});
        hmap.put('8', new char[]{'t','u','v'});
        hmap.put('9', new char[]{'w','x','y','z'});
        
        List<String> ans = new ArrayList<String>();
        if(digits == null || digits.length() == 0){
            return ans;
        }
        StringBuffer temp = new StringBuffer();
        helper(ans, hmap, temp, digits,0);
        
        return ans;
    }
    
    void helper(List ans, HashMap hmap, StringBuffer temp, String digits, int index){
        //base case
        if(temp.length() == digits.length()){
            ans.add(temp.toString());
            return;
        }
        else{
            if(index < digits.length()){
                for(char c : (char[])hmap.get(digits.charAt(index))){
                    temp = temp.append(c);
                    helper(ans, hmap, temp, digits,index+1);
                    temp = temp.deleteCharAt(temp.length() - 1);
                }
            }
        }
    }
}
