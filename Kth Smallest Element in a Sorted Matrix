class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        //leetcode 378, time:O(klogn), space:O(n)
        int n = matrix.length;
        PriorityQueue<Tuple> pq = new PriorityQueue<>(n, (a, b) -> (a.value - b.value));
        
        for(int i = 0; i < n; i++){
            pq.offer(new Tuple(0, i, matrix[0][i]));
        }
        
        for(int i = 0; i < k-1; i++){
            Tuple tmp = pq.poll();
            if(tmp.x < n-1){
                pq.offer(new Tuple(tmp.x+1, tmp.y, matrix[tmp.x+1][tmp.y]));
            }
        }
        
        return pq.poll().value;
    }
    
    class Tuple{
        int x;
        int y;
        int value;
        
        public Tuple(int x, int y, int value){
            this.x = x;
            this.y = y;
            this.value = value;
        }
    }
}
