class Solution {
/**
     * 厄拉多塞筛法，求一组质数，时间复杂度仅有O(nloglogn)
     * 如果从1到n-1分别判断质数，时间复杂度为O(nsqrt(n))）
     * 1   2  3  4  5  6  7  8  9 10
     * 11 12 13 14 15 16 17 18 18 20
     *
     * @param n
     * @return
     */
    public int countPrimes(int n) {
        /*method: shieve
        int ans = 0;
        boolean[] notPrime = new boolean[n];
        
        for(int i = 2; i < n; i++){
            if(notPrime[i] == false){
                ans++;
                for(int j = 2; i * j < n; j++){
                    notPrime[i*j] = true;
                }
            }
        }
        
        return ans;
        */
        
        //method 2 - TLE
        int ans = 0;
        for(int i = 2; i < n; i++){
            if(isPrime(i)){
                ans++;
            }
        }
        
        return ans;
    }
    
    private boolean isPrime(int i){
        int maxCheck = (int)Math.sqrt(i);
        for(int j = 2; j <= maxCheck; j++){
            if(i % j == 0) return false;
        }
        
        return true;
    }
}
