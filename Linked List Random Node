/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    //leetcode 382
    //time: O(n), space: O(1)
    ListNode head;
    Random random;
    /** @param head The linked list's head.
        Note that the head is guaranteed to be not null, so it contains at least one node. */
    public Solution(ListNode head) {
        this.head = head;
        random = new Random();
    }
    
    /** Returns a random node's value. */
    public int getRandom() {
        int res = head.val;
        ListNode cur = head;
        for(int i = 1; cur.next != null; i++){
            cur = cur.next;
            if(random.nextInt(i+1) == i){
                res = cur.val;
            }
        }
        
        return res;
    }
    
    //time: O(n), space: O(n)
    /*
    List<Integer> list;
    Random random;

    public Solution(ListNode head) {
        list = new ArrayList<>();
        random = new Random();
        while(head != null){
            list.add(head.val);
            head = head.next;
        }
    }
    
    public int getRandom() {
        int index = random.nextInt(list.size());
        return list.get(index);
    }
    */
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(head);
 * int param_1 = obj.getRandom();
 */
