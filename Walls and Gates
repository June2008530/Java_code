class Solution {
    //leetcode 286, time: O(m X n), space: O(min(m, n)) / O(m X n)
    public void wallsAndGates(int[][] rooms) {
        if(rooms == null || rooms.length == 0) return;
        
        int m = rooms.length;
        int n = rooms[0].length;
        
        for(int row = 0; row < m; row++){
            for(int col = 0; col < n; col++){
                if(rooms[row][col] == 0){
                    bfs(rooms, 0, row, col, m, n);
                }
            }
        }
        
    }
    
    void bfs(int[][] rooms, int original, int row, int col, int m, int n){
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{0, row, col});
        while(!queue.isEmpty()){
            int[] tmp = queue.remove();
            if(tmp[1] - 1 >= 0 && rooms[tmp[1]-1][tmp[2]] != -1 && rooms[tmp[1]-1][tmp[2]] > tmp[0]){
                queue.add(new int[]{tmp[0]+1, tmp[1]-1, tmp[2]});
                rooms[tmp[1]-1][tmp[2]] = tmp[0]+1;
            }
            if(tmp[1] + 1 < m && rooms[tmp[1]+1][tmp[2]] != -1 && rooms[tmp[1]+1][tmp[2]] > tmp[0]){
                queue.add(new int[]{tmp[0]+1, tmp[1]+1, tmp[2]});
                rooms[tmp[1]+1][tmp[2]] = tmp[0]+1;
            }
            if(tmp[2] - 1 >= 0 && rooms[tmp[1]][tmp[2]-1] != -1 && rooms[tmp[1]][tmp[2]-1] > tmp[0]){
                queue.add(new int[]{tmp[0]+1, tmp[1], tmp[2]-1});
                rooms[tmp[1]][tmp[2]-1] = tmp[0]+1;
            }
            if(tmp[2] + 1 < n && rooms[tmp[1]][tmp[2]+1] != -1 && rooms[tmp[1]][tmp[2]+1] > tmp[0]){
                queue.add(new int[]{tmp[0]+1, tmp[1], tmp[2]+1});
                rooms[tmp[1]][tmp[2]+1] = tmp[0]+1;
            }
        }
    }
    
    void dfs(int[][] rooms, int original, int row, int col, int m, int n){
        if(row < 0 || row >= m || col < 0 || col >= n || rooms[row][col] == -1 || rooms[row][col] < original)
            return;
        
        if(rooms[row][col] > original){
            rooms[row][col] = original;
        }
        
        dfs(rooms, original + 1, row-1, col, m, n);
        dfs(rooms, original + 1, row+1, col, m, n);
        dfs(rooms, original + 1, row, col-1, m, n);
        dfs(rooms, original + 1, row, col+1, m, n);
    }
}
