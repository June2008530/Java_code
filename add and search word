class WordDictionary {
    
    class TrieNode{
        TrieNode[] children;
        boolean isWord;
        public TrieNode(){
            children = new TrieNode[26];
            isWord = false;
        }
    }

    /** Initialize your data structure here. */
    TrieNode root;
    
    public WordDictionary() {
        root = new TrieNode();
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        TrieNode p = root;
        for(int i = 0; i < word.length(); i++){
            int index = (int)(word.charAt(i) - 'a');
            if(p.children[index] == null){
                p.children[index] = new TrieNode();
            }
            p = p.children[index];
        }
        p.isWord = true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        return find(word, root, 0);
    }
    
    private boolean find(String word, TrieNode node, int index){
        //base
        if(index == word.length()){
            return node.isWord;
        }
        
        if(word.charAt(index) == '.'){
            for(TrieNode next : node.children){
                if(next != null && find(word, next, index+1)){
                    return true;
                }
            }
            return false;
        }
        else{
            int j = word.charAt(index) - 'a';
            TrieNode temp = node.children[j];
            return temp != null && find(word, temp, index+1);
        }
        
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */
