/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        if(head == null){
            return head;
        }
        
        //create new node and link to the old, 1->1'->2->2'->3->3'
        RandomListNode cur = head;
        while(cur != null){
            RandomListNode copy = new RandomListNode(cur.label);
            copy.next = cur.next;
            cur.next = copy;
            cur = copy.next;
        }
        
        //link random pointer for copied node
        cur = head;
        while(cur != null){
            if(cur.random != null){
                cur.next.random = cur.random.next;
            }
            cur = cur.next.next;
        }
        
        //seperate list
        RandomListNode newhead = head.next;
        cur = head;
        while(cur != null){
            RandomListNode newnode = cur.next;
            cur.next = newnode.next;
            if(newnode.next != null){
                newnode.next = newnode.next.next;
            }
            cur = cur.next;
        }
        
        return newhead;
        
        /*
        HashMap<RandomListNode, RandomListNode> hashmap = new HashMap<>();
        RandomListNode cur = head;
        
        //create new node and put into hashmap
        while(cur != null){
            hashmap.put(cur, new RandomListNode(cur.label));
            cur = cur.next;
        }
        
        //link next and random
        cur = head;
        while(cur != null){
            hashmap.get(cur).next = hashmap.get(cur.next);
            hashmap.get(cur).random = hashmap.get(cur.random);
            cur = cur.next;
        }
        
        return hashmap.get(head);
        */
    }
}
