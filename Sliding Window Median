class Solution {
    public double[] medianSlidingWindow(int[] nums, int k) {
        //leetcode 480
        //time: O(n-k+1) * k, space: O(k)
        if(nums == null || nums.length == 0) return new double[0];
        
        double[] ans = new double[nums.length - k + 1];
        int[] window = new int[k];
        for(int i = 0; i < k; i++){
            window[i] = nums[i];
        }
        Arrays.sort(window);
        
        for(int i = k; i <= nums.length; i++){
            ans[i-k] = ((double)window[k/2] + window[(k-1)/2])/2;
            if(i == nums.length) break;
            remove(window, nums[i-k]);
            insert(window, nums[i]);
        }
        
        return ans;
    }
    
    private void insert(int[] window, int val){
        int i = 0;
        while(i < window.length-1 && val > window[i]){
            i++;
        }
        int j = window.length - 1;
        while(j > i){
            window[j] = window[j-1];
            j--;
        }
        window[j] = val;
    }
    
    private void remove(int[] window, int val){
        int i = 0;
        while(i < window.length && window[i] != val){
            i++;
        }
        while(i < window.length - 1){
            window[i] = window[i+1];
            i++;
        }
    }
}
