/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
 
public class NestedIterator implements Iterator<Integer> {

    private List<NestedInteger> nestedList;
    private Stack<NestedInteger> stack;
    
    public NestedIterator(List<NestedInteger> nestedList) {
        this.nestedList = nestedList;
        stack = new Stack<>();
        for(int i = nestedList.size() - 1; i >= 0; i--){
            stack.push(nestedList.get(i));
        }
    }

    @Override
    public Integer next() {
        return stack.pop().getInteger();
    }

    @Override
    public boolean hasNext() {
        while(!stack.isEmpty()){
            NestedInteger cur = stack.peek();
            if(cur.isInteger()){
                return true;
            }

            stack.pop();
            for(int i = cur.getList().size() - 1; i >= 0; i--){
                stack.push(cur.getList().get(i));
            }
        }
        
        return false;
    }
} 
 
public class NestedIterator implements Iterator<Integer> {

    private List<NestedInteger> nestedList;
    private List<Integer> flatList;
    private ListIterator it;
    
    public NestedIterator(List<NestedInteger> nestedList) {
        this.nestedList = nestedList;
        flatList = new ArrayList<Integer>();
        flattenList(flatList, this.nestedList);
        it = flatList.listIterator();
    }
                             
    private void flattenList(List<Integer> flatList, List<NestedInteger> nestedList){
        for(NestedInteger ni:nestedList){
            if(ni.isInteger()){
                flatList.add(ni.getInteger());
            }
            else{
                flattenList(flatList, ni.getList());
            }
        }
    }

    @Override
    public Integer next() {
        return (Integer)it.next();
    }

    @Override
    public boolean hasNext() {
        return it.hasNext();
    }
}

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i = new NestedIterator(nestedList);
 * while (i.hasNext()) v[f()] = i.next();
 */
