class Solution {
    private int m;
    private int n;
    
    public int numIslands(char[][] grid) {
        if(grid == null || grid.length == 0){
            return 0;
        }
        
        int ans = 0;
        m = grid.length;
        n = grid[0].length;
        
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == '1'){
                    bfs(i, j, grid);
                    //dfs(i, j, grid);
                    ans++;
                }
            }
        }
        
        return ans;
    }
    
    class Pair{
        int x;
        int y;
        public Pair(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
    
    //bfs
    private void bfs(int i, int j, char[][] grid){
        if(i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == '0'){
            return;
        }
        
        grid[i][j] = '1';
        Pair pair = new Pair(i, j);
        Queue<Pair> queue = new LinkedList<>();
        queue.offer(pair);
        
        while(!queue.isEmpty()){
            Pair temp = queue.poll();
            if(temp.x - 1 >= 0 && grid[temp.x - 1][temp.y] == '1'){
                grid[temp.x - 1][temp.y] = '0';
                queue.offer(new Pair(temp.x - 1, temp.y));
            }
            if(temp.x + 1 < m && grid[temp.x + 1][temp.y] == '1'){
                grid[temp.x + 1][temp.y] = '0';
                queue.offer(new Pair(temp.x + 1, temp.y));
            }
            if(temp.y - 1 >= 0 && grid[temp.x][temp.y - 1] == '1'){
                grid[temp.x][temp.y - 1] = '0';
                queue.offer(new Pair(temp.x, temp.y - 1));
            }
            if(temp.y + 1 < n && grid[temp.x][temp.y + 1] == '1'){
                grid[temp.x][temp.y + 1] = '0';
                queue.offer(new Pair(temp.x, temp.y + 1));
            }
        }
    }
    
    //dfs
    private void dfs(int i, int j, char[][] grid){
        if(i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == '0') return;
        
            grid[i][j] = '0';
            dfs(i, j+1, grid);
            dfs(i, j-1, grid);
            dfs(i+1, j, grid);
            dfs(i-1, j, grid);
    }
}
