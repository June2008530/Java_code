class Solution {
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        //leetcode 340, time: O(n), space: O(k)
        if(s == null || s.length() == 0 || k < 1) return 0;
        
        int res = 0;
        int cur = 0;
        Map<Character, Integer> map = new HashMap<>();
        
        for(int i = 0; i < s.length(); i++){
            if(map.size() < k || map.containsKey(s.charAt(i))){
                cur++;
                map.put(s.charAt(i), i);
            }
            else{
                Character ch = s.charAt(0);
                int ind = s.length();
                for(Character c : map.keySet()){
                    if(map.get(c) < ind){
                        ind = map.get(c);
                        ch = c;
                    }
                }
                cur = i - ind;
                map.remove(ch,ind);
                map.put(s.charAt(i), i);
            }
            
            res = Math.max(res, cur);
        }
        
        return res;
    }
}
