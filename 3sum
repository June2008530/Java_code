/*3Sum
Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? 
Find all unique triplets in the array which gives the sum of zero.
Note:
The solution set must not contain duplicate triplets.
Example:
Given array nums = [-1, 0, 1, 2, -1, -4],
A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
*/
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        Arrays.sort(nums);
        for(int i = 0; i < nums.length; i++){
            if(i > 0 && nums[i] == nums[i-1]){
                continue;
            }
            int target = 0 - nums[i];
            result.addAll(threeSumHelper(nums, i, target));
        }

        return result;
    }
    
    List<List<Integer>> threeSumHelper(int[] nums, int i, int target){
        List<List<Integer>> myList = new ArrayList<List<Integer>>();
        
        int start = i + 1;
        int end = nums.length - 1;
        while(start < end){
            if (nums[start] + nums[end] == target){
                List<Integer> subList = Arrays.asList(nums[i],nums[start],nums[end]);
                if (!myList.contains(subList)){
                    myList.add(Arrays.asList(nums[i],nums[start],nums[end]));
                }
                start++;
                end--;
            }
            else if (nums[start] + nums[end] > target){
                end--;
            }
            else {
                start++;
            } 
        }
        
        /*
        List<List<Integer>> myList = new ArrayList<List<Integer>>();
        HashMap<Integer, Integer> hmap = new HashMap<Integer, Integer>();
        for (int j = i+1; j < nums.length; j++){
            int third = target - nums[j];
            if(hmap.containsKey(third)){
                myList.add(Arrays.asList(nums[i],nums[j],third));
            }
            hmap.put(nums[j], j);
        }
        */
        return myList;
    }
}
