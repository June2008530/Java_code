/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        //leetcode 23
        //time: O(Nlogk), N number of nodes, k number of lists
        //space: O(N)
        //base
        if(lists == null || lists.length == 0)) return null;
        if(lists.length == 1) return lists[0];
        
        int len = (lists.length % 2 == 0 ? lists.length/2 : lists.length/2 + 1);
        ListNode[] merged = new ListNode[len];
        int j = 0;
        for(int i = 0; i+1 < lists.length; i += 2){
            ListNode node = mergeTwo(lists[i], lists[i+1]);
            merged[j] = node;
            j++;
        }
        if(lists.length % 2 != 0){
            merged[j] = lists[lists.length - 1];
        }
        //recursion
        return mergeKLists(merged);
    }
    
    private ListNode mergeTwo(ListNode n1, ListNode n2){
        if(n1 == null && n2 == null) return null;
        if(n1 == null) return n2;
        if(n2 == null) return n1;
        
        ListNode head = new ListNode(0);
        ListNode cur = head;
        while(n1 != null && n2 != null){
            if(n1.val < n2.val){
                cur.next = n1;
                n1 = n1.next;
            }
            else{
                cur.next = n2;
                n2 = n2.next;
            }
            cur = cur.next;
        }
        while(n1 != null){
            cur.next = n1;
            cur = cur.next;
            n1 = n1.next;
        }
        while(n2 != null){
            cur.next = n2;
            cur = cur.next;
            n2 = n2.next;
        }
   
        return head.next;
    }
}
